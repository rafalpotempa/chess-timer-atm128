###############################################################################
#
# IAR C/C++ Compiler V6.80.5.1069 for Atmel AVR           09/Dec/2019  08:35:46
# Copyright 1996-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR
#
#    Source file  =  D:\lab_15\lib\queue.c
#    Command line =  
#        D:\lab_15\lib\queue.c --cpu=m128 -ms -o
#        D:\lab_15\lab_10_lcd_printf\Debug\Obj -lC
#        D:\lab_15\lab_10_lcd_printf\Debug\List -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I ..\lib\ --eeprom_size
#        4096 --clib -Ol
#    Locale       =  Polish_Poland.1250
#    List file    =  D:\lab_15\lab_10_lcd_printf\Debug\List\queue.lst
#    Object file  =  D:\lab_15\lab_10_lcd_printf\Debug\Obj\queue.r90
#
###############################################################################

D:\lab_15\lib\queue.c
      1          #include "queue.h"
      2          

   \                                 In  segment CODE, align 2, keep-with-next
      3          void qInit(TQueue *q, unsigned char *buf, unsigned char size)
   \                     qInit:
      4          {
      5          	q->buf = buf;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8324               STD     Z+4, R18
   \   00000004   8335               STD     Z+5, R19
      6          	q->size = size;
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   8340               ST      Z, R20
      7          	qFlush(q);
   \   0000000A   ....               RCALL   qFlush
      8          }
   \   0000000C   9508               RET
      9          

   \                                 In  segment CODE, align 2, keep-with-next
     10          __monitor unsigned char qAdd(TQueue *q, unsigned char d)
   \                     qAdd:
     11          {
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E0A               MOV     R0, R26
   \   00000004   B76F               IN      R22, 0x3F
   \   00000006   94F8               CLI
     12              if(q->data_cnt == q->size)
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   8131               LDD     R19, Z+1
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   8140               LD      R20, Z
   \   00000010   1734               CP      R19, R20
   \   00000012   F411               BRNE    ??qAdd_0
     13                  return 0;
   \   00000014   E000               LDI     R16, 0
   \   00000016   C01B               RJMP    ??qAdd_1
     14              q->buf[q->head] = d;
   \                     ??qAdd_0:
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   81A4               LDD     R26, Z+4
   \   0000001C   81B5               LDD     R27, Z+5
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   8142               LDD     R20, Z+2
   \   00000022   E050               LDI     R21, 0
   \   00000024   0FA4               ADD     R26, R20
   \   00000026   1FB5               ADC     R27, R21
   \   00000028   932C               ST      X, R18
     15              if((++q->head) == q->size)
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   8122               LDD     R18, Z+2
   \   0000002E   9523               INC     R18
   \   00000030   8322               STD     Z+2, R18
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   8122               LDD     R18, Z+2
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   8130               LD      R19, Z
   \   0000003A   1723               CP      R18, R19
   \   0000003C   F419               BRNE    ??qAdd_2
     16                  q->head = 0;
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   E020               LDI     R18, 0
   \   00000042   8322               STD     Z+2, R18
     17              ++q->data_cnt;
   \                     ??qAdd_2:
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8101               LDD     R16, Z+1
   \   00000048   9503               INC     R16
   \   0000004A   8301               STD     Z+1, R16
     18              return 1;
   \   0000004C   E001               LDI     R16, 1
   \                     ??qAdd_1:
   \   0000004E   BF6F               OUT     0x3F, R22
   \   00000050   2DA0               MOV     R26, R0
   \   00000052   2FB7               MOV     R27, R23
   \   00000054   9508               RET
     19          }
     20          
     21          

   \                                 In  segment CODE, align 2, keep-with-next
     22          __monitor unsigned char qGet(TQueue *q, unsigned char *pd)
   \                     qGet:
     23          {
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E0A               MOV     R0, R26
   \   00000004   B76F               IN      R22, 0x3F
   \   00000006   94F8               CLI
     24              if(q->data_cnt == 0) return 0;
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   8141               LDD     R20, Z+1
   \   0000000C   2344               TST     R20
   \   0000000E   F411               BRNE    ??qGet_0
   \   00000010   E000               LDI     R16, 0
   \   00000012   C01D               RJMP    ??qGet_1
     25              *pd = q->buf[q->tail];
   \                     ??qGet_0:
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   81A4               LDD     R26, Z+4
   \   00000018   81B5               LDD     R27, Z+5
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   8143               LDD     R20, Z+3
   \   0000001E   E050               LDI     R21, 0
   \   00000020   0FA4               ADD     R26, R20
   \   00000022   1FB5               ADC     R27, R21
   \   00000024   914C               LD      R20, X
   \   00000026   01F9               MOVW    R31:R30, R19:R18
   \   00000028   8340               ST      Z, R20
     26              if((++q->tail) == q->size)
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   8123               LDD     R18, Z+3
   \   0000002E   9523               INC     R18
   \   00000030   8323               STD     Z+3, R18
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   8123               LDD     R18, Z+3
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   8130               LD      R19, Z
   \   0000003A   1723               CP      R18, R19
   \   0000003C   F419               BRNE    ??qGet_2
     27                  q->tail = 0;
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   E020               LDI     R18, 0
   \   00000042   8323               STD     Z+3, R18
     28              --q->data_cnt;
   \                     ??qGet_2:
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8101               LDD     R16, Z+1
   \   00000048   950A               DEC     R16
   \   0000004A   8301               STD     Z+1, R16
     29              return 1;
   \   0000004C   E001               LDI     R16, 1
   \                     ??qGet_1:
   \   0000004E   BF6F               OUT     0x3F, R22
   \   00000050   2DA0               MOV     R26, R0
   \   00000052   2FB7               MOV     R27, R23
   \   00000054   9508               RET
     30          }
     31          

   \                                 In  segment CODE, align 2, keep-with-next
     32          void qFlush(TQueue *q)
   \                     qFlush:
     33          {
     34          	q->data_cnt = 0;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   E020               LDI     R18, 0
   \   00000004   8321               STD     Z+1, R18
     35          	q->head = 0;
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   E020               LDI     R18, 0
   \   0000000A   8322               STD     Z+2, R18
     36          	q->tail = 0;
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   E000               LDI     R16, 0
   \   00000010   8303               STD     Z+3, R16
     37          }
   \   00000012   9508               RET

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   qAdd
      2   qFlush
      2   qGet
      2   qInit
        2   -> qFlush


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      86  qAdd
      20  qFlush
      86  qGet
      14  qInit

 
 206 bytes in segment CODE
 
 206 bytes of CODE memory

Errors: none
Warnings: none
