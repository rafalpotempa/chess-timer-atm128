###############################################################################
#
# IAR C/C++ Compiler V6.80.5.1069 for Atmel AVR           09/Dec/2019  10:13:49
# Copyright 1996-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR
#
#    Source file  =  D:\lab_15\lib\rtc_simple.c
#    Command line =  
#        D:\lab_15\lib\rtc_simple.c --cpu=m128 -ms -o
#        D:\lab_15\lab_10_lcd_printf\Debug\Obj -lC
#        D:\lab_15\lab_10_lcd_printf\Debug\List -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I ..\lib\ --eeprom_size
#        4096 --clib -Ol
#    Locale       =  Polish_Poland.1250
#    List file    =  D:\lab_15\lab_10_lcd_printf\Debug\List\rtc_simple.lst
#    Object file  =  D:\lab_15\lab_10_lcd_printf\Debug\Obj\rtc_simple.r90
#
###############################################################################

D:\lab_15\lib\rtc_simple.c
      1          #include "rtc_simple.h"
      2          

   \                                 In  segment CODE, align 2, keep-with-next
      3          void rtcInc(TClock *rtc)
   \                     rtcInc:
      4          {
      5          	if((++rtc->sec) != 60) return;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8120               LD      R18, Z
   \   00000004   9523               INC     R18
   \   00000006   8320               ST      Z, R18
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   8120               LD      R18, Z
   \   0000000C   332C               CPI     R18, 60
   \   0000000E   F4C9               BRNE    ??rtcInc_0
      6          	rtc->sec = 0;
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   E020               LDI     R18, 0
   \   00000014   8320               ST      Z, R18
      7          	if((++rtc->min) != 60) return;
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   8121               LDD     R18, Z+1
   \   0000001A   9523               INC     R18
   \   0000001C   8321               STD     Z+1, R18
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   8121               LDD     R18, Z+1
   \   00000022   332C               CPI     R18, 60
   \   00000024   F471               BRNE    ??rtcInc_0
      8          	rtc->min = 0;
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   E020               LDI     R18, 0
   \   0000002A   8321               STD     Z+1, R18
      9          	if((++rtc->hr) != 24) return;
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8122               LDD     R18, Z+2
   \   00000030   9523               INC     R18
   \   00000032   8322               STD     Z+2, R18
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   3128               CPI     R18, 24
   \   0000003A   F419               BRNE    ??rtcInc_0
     10          	rtc->hr = 0;
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   E000               LDI     R16, 0
   \   00000040   8302               STD     Z+2, R16
     11          }
   \                     ??rtcInc_0:
   \   00000042   9508               RET
     12          

   \                                 In  segment CODE, align 2, keep-with-next
     13          void rtcDec(TClock *rtc)
   \                     rtcDec:
     14          {
     15          	if((--rtc->sec) != 255) return;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8120               LD      R18, Z
   \   00000004   952A               DEC     R18
   \   00000006   8320               ST      Z, R18
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   8120               LD      R18, Z
   \   0000000C   3F2F               CPI     R18, 255
   \   0000000E   F4C9               BRNE    ??rtcDec_0
     16          	rtc->sec = 59;
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   E32B               LDI     R18, 59
   \   00000014   8320               ST      Z, R18
     17          	if((--rtc->min) != 255) return;
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   8121               LDD     R18, Z+1
   \   0000001A   952A               DEC     R18
   \   0000001C   8321               STD     Z+1, R18
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   8121               LDD     R18, Z+1
   \   00000022   3F2F               CPI     R18, 255
   \   00000024   F471               BRNE    ??rtcDec_0
     18          	rtc->min = 59;
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   E32B               LDI     R18, 59
   \   0000002A   8321               STD     Z+1, R18
     19          	if((--rtc->hr) != 255) return;
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8122               LDD     R18, Z+2
   \   00000030   952A               DEC     R18
   \   00000032   8322               STD     Z+2, R18
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   3F2F               CPI     R18, 255
   \   0000003A   F419               BRNE    ??rtcDec_0
     20          	rtc->hr = 9;
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   E009               LDI     R16, 9
   \   00000040   8302               STD     Z+2, R16
     21          }
   \                     ??rtcDec_0:
   \   00000042   9508               RET
     22          

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   rtcDec
      2   rtcInc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      68  rtcDec
      68  rtcInc

 
 136 bytes in segment CODE
 
 136 bytes of CODE memory

Errors: none
Warnings: none
